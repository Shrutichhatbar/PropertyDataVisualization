// Generated by IcedCoffeeScript 108.0.8
(function() {
  exports.getTotalCount = function(req, res) {
    var collection, db;
    db = req.db;
    collection = db.get('aptdb');
    collection.count({}, function(error, count) {
      res.json(count);
    });
  };

  exports.propertylist = function(req, res) {
    var collection, db;
    db = req.db;
    collection = db.get('aptdb');
    collection.col.aggregate([
      {
        '$group': {
          '_id': '$region',
          'Average': {
            '$avg': '$price'
          }
        }
      }
    ], function(err, docs) {
      if (err) {
        console.log(err);
      }
      console.log(docs);
      res.json(docs);
    });
  };

  exports.propertylistByRegionRange = function(req, res) {
    var collection, db, max, min;
    db = req.db;
    collection = db.get('aptdb');
    min = parseInt(req.query.min);
    max = parseInt(req.query.max);
    collection.col.aggregate([
      {
        '$match': {
          'price': {
            $gt: min,
            $lt: max
          }
        }
      }, {
        '$group': {
          '_id': '$region',
          'count': {
            $sum: 1
          }
        }
      }
    ], function(err, docs) {
      if (err) {
        console.log(err);
      }
      console.log(docs);
      res.json(docs);
    });
  };

  exports.updatebyregionorfilterchange = function(req, res) {
    var collection, db, end, filter, max, min, reg, start, totalRecord;
    db = req.db;
    collection = db.get('aptdb');
    min = typeof req.query.min !== 'undefined' && req.query.min !== null ? parseInt(req.query.min) : -1;
    max = typeof req.query.max !== 'undefined' && req.query.max !== null ? parseInt(req.query.max) : -1;
    reg = typeof req.query.region !== 'undefined' && req.query.region !== null ? req.query.region : 'all';
    filter = typeof req.query.filter !== 'undefined' && req.query.filter !== null ? req.query.filter : 'No Filters';
    start = parseInt(req.query.start);
    end = parseInt(req.query.end);
    totalRecord = parseInt(end - start);
    if (reg === 'San Francisco') {
      reg = 'sfc';
    } else if (reg === 'North Bay') {
      reg = 'nby';
    } else if (reg === 'South Bay') {
      reg = 'sby';
    } else if (reg === 'East Bay') {
      reg = 'eby';
    } else if (reg === 'Santa Cruz') {
      reg = 'scz';
    } else if (reg === 'Peninsula') {
      reg = 'pen';
    } else {
      reg = 'all';
    }
    if (reg === 'all' && filter === 'No Filters' && min === -1 && max === -1) {
      collection.find({}, {
        limit: totalRecord,
        skip: start
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg !== 'all' && filter === 'No Filters') {
      collection.find({
        region: reg,
        price: {
          $gte: min,
          $lte: max
        }
      }, {
        limit: totalRecord,
        skip: start
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg === 'all' && filter === 'No Filters') {
      collection.find({
        price: {
          $lte: max,
          $gte: min
        }
      }, {
        limit: totalRecord,
        skip: start
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg !== 'all' && filter === 'Price Low to High') {
      collection.find({
        region: reg,
        price: {
          $gte: min,
          $lte: max
        }
      }, {
        limit: totalRecord,
        skip: start,
        sort: {
          price: 1
        }
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg === 'all' && filter === 'Price Low to High') {
      collection.find({
        price: {
          $gte: min,
          $lte: max
        }
      }, {
        limit: totalRecord,
        skip: start,
        sort: {
          price: 1
        }
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg !== 'all' && filter === 'Price High to Low') {
      collection.find({
        region: reg,
        price: {
          $gte: min,
          $lte: max
        }
      }, {
        limit: totalRecord,
        skip: start,
        sort: {
          price: -1
        }
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg === 'all' && filter === 'Price High to Low') {
      collection.find({
        price: {
          $lte: max,
          $gte: min
        }
      }, {
        limit: totalRecord,
        skip: start,
        sort: {
          price: -1
        }
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg !== 'all' && filter === 'Newest First') {
      collection.find({
        region: reg,
        price: {
          $gte: min,
          $lte: max
        }
      }, {
        limit: totalRecord,
        skip: start,
        sort: {
          date: -1
        }
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg === 'all' && filter === 'Newest First') {
      collection.find({
        price: {
          $lte: max,
          $gte: min
        }
      }, {
        limit: totalRecord,
        skip: start,
        sort: {
          date: -1
        }
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg !== 'all' && filter === 'Oldest First') {
      console.log('abd');
      collection.find({
        region: reg,
        price: {
          $gte: min,
          $lte: max
        }
      }, {
        limit: totalRecord,
        skip: start,
        sort: {
          date: 1
        }
      }, function(e, docs) {
        res.json(docs);
      });
    } else if (reg === 'all' && filter === 'Oldest First') {
      console.log('oldall');
      collection.find({
        price: {
          $lte: max,
          $gte: min
        }
      }, {
        limit: totalRecord,
        skip: start,
        sort: {
          date: 1
        }
      }, function(e, docs) {
        res.json(docs);
      });
    }
  };

  exports.getCountOnChange = function(req, res) {
    var collection, db, max, min, reg;
    db = req.db;
    collection = db.get('aptdb');
    min = parseInt(req.query.min);
    max = parseInt(req.query.max);
    reg = req.query.region;
    console.log(reg);
    if (reg === 'San Francisco') {
      reg = 'sfc';
    } else if (reg === 'North Bay') {
      reg = 'nby';
    } else if (reg === 'South Bay') {
      reg = 'sby';
    } else if (reg === 'East Bay') {
      reg = 'eby';
    } else if (reg === 'Santa Cruz') {
      reg = 'scz';
    } else if (reg === 'Peninsula') {
      reg = 'pen';
    } else {
      reg = 'all';
    }
    if (reg !== 'all') {
      collection.count({
        region: reg,
        price: {
          $lte: max,
          $gte: min
        }
      }, function(error, count) {
        res.json(count);
      });
    } else {
      collection.count({
        price: {
          $lte: max,
          $gte: min
        }
      }, function(e, count) {
        res.json(count);
      });
    }
  };

}).call(this);
